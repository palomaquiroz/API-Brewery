{
	"info": {
		"_postman_id": "21d7f997-6af3-45b7-a9cb-3c843310fb6b",
		"name": "Brewery API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Single Brewery",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Goose Island Philadelphia\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/11039",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"11039"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Bewery with Invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/testId",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"testId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Bewery with invalid param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Goose Island Philadelphia\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/11039!!",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"11039!!"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Breweries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"e\", \"n\", \"o\", \"l\", \"a\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/?search=Enola",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "search",
							"value": "Enola"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Breweries with long param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Nebraska\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/search?query=Nebraska",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "query",
							"value": "Nebraska"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Breweries with no param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/search",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Snow Belt Brew\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/?name=Snow_Belt_Brew",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "Snow_Belt_Brew"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by state",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Pennsylvania\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?state=Pennsylvania",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "state",
							"value": "Pennsylvania"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Postal Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"78727-7602\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?postal=78727-7602",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "postal",
							"value": "78727-7602"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Contract",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"contract\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=contract",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "contract"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Bar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"bar\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=bar",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "bar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Proprietor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"proprietor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=proprietor",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "proprietor"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Brewpub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"brewpub\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=brewpub",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "brewpub"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Large",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"large\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=large",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "large"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Planning",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"planning\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=planning",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "planning"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by Nano",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"nano\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=nano",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "nano"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by 'Closed'",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"closed\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=closed",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "closed"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries with PageSize = 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"122 West Brewing Co\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Bad Bulldogs Brewery\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?type=closed&pageSize=2",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "type",
							"value": "closed"
						},
						{
							"key": "pageSize",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?name=1234xxx",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "name",
							"value": "1234xxx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by invalid state",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?state=TestingState",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "state",
							"value": "TestingState"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by invalid postal code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"rejected value\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?postal=21312-234",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "postal",
							"value": "21312-234"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by multiple params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mallory Brewing\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"planning\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Texas\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"77018\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?name=Mallory Brewing&state=Texas&postal=77018&type=planning",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "name",
							"value": "Mallory Brewing"
						},
						{
							"key": "state",
							"value": "Texas"
						},
						{
							"key": "postal",
							"value": "77018"
						},
						{
							"key": "type",
							"value": "planning"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List breweries by multiple invalid params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Test\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"nano\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"TestingState\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"77018\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}?name=Test&state=TestingState&postal=77018&type=nano",
					"host": [
						"{{HostURL}}"
					],
					"query": [
						{
							"key": "name",
							"value": "Test"
						},
						{
							"key": "state",
							"value": "TestingState"
						},
						{
							"key": "postal",
							"value": "77018"
						},
						{
							"key": "type",
							"value": "nano"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HostURL",
			"value": "http://localhost:8080/breweries"
		}
	]
}